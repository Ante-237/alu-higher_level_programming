
Testing for full valid input:
	>>> mtest = [ [1, 2, 3], [4, 5, 6] ]
	>>> mdiv = __import__('2-matrix_divided').matrix_divided
	>>> print(mdiv(mtest, 2))
	[0.5, 1.0, 1.5, 2.0, 2.5, 3.0]

Testing for 0 division value:
	>>> print(mdiv(mtest, 0))
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero
	
Some Extreme Normal Test:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]

	>>> print(matrix_divided(matrix, 2))
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

	>>> print(matrix_divided(matrix, -5))
	[[-0.2, -0.4, -0.6], [-0.8, -1.0, -1.2]]

	>>> print(matrix_divided(matrix, 6.9))
	[[0.14, 0.29, 0.43], [0.58, 0.72, 0.87]]

	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> print(matrix_divided(matrix, True))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	>>> print(matrix_divided(matrix, float("inf")))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

	>>> matrix = [[1, 2, 3]]
	>>> print(matrix_divided(matrix, 1))
	[[1.0, 2.0, 3.0]]

Testing for not int or float input:
	>>> mtest = [ ['a', 'b', 'c'], [3, 5, 6] ]
	>>> print(mdiv(mtest, 2))
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing for not int or float div input:
	>>> mtest = [ [1, 2, 3], [4, 5, 6]]
	>>> print(mdiv(mtest, "2"))
	Traceback (most recent call last):
	...
	TypeError: div must be a number

Testing different number of row elements:
	>>> mtest [ [1, 2], [3, 4, 5] ]
	>>> print(mdiv(mtest, 2))
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

Testing normal case
